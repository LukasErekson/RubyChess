var search_data = {"index":{"searchIndex":["bishop","chessgame","chesspiece","invalidmoveerror","king","knight","movetree","movetreenode","object","pawn","queen","rook","<=>()","==()","add_child()","available_moves()","board_pieces_by_color()","build_bishop_move_tree()","build_directional_tree_nodes()","build_king_move_tree()","build_knight_move_tree()","build_pawn_move_tree()","build_pawn_move_tree_first_move()","build_queen_move_tree()","build_rook_move_tree()","can_capture?()","can_capture?()","can_castle?()","change_turn()","check_check()","check_game_over()","clone()","convert_algebraic_coordinates()","convert_coordinates()","display_saves()","each()","en_passant()","first_move?()","forecast_move()","get_en_passant_moves()","legal_moves()","load_game()","main()","make_move()","move()","move()","move()","move_tree_in_bounds()","moved?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_piece_type()","parse_move()","pawn_legal_moves()","place_back_row()","place_pawns()","place_pieces()","play()","player_input()","player_input_type()","possible_moves()","possible_moves()","print_help_menu()","print_out_of_check_moves()","print_piece_types()","random_move()","remove_child()","save_game()","setup_board()","setup_board()","to_a()","to_s()","to_s()","to_s()","trim_branch!()","validate_move()","gemfile","gemfile.lock","readme","rakefile","rubychess-workspace.code-workspace","application.css","application.js","index.html","index.html","main.css"],"longSearchIndex":["bishop","chessgame","chesspiece","invalidmoveerror","king","knight","movetree","movetreenode","object","pawn","queen","rook","chesspiece#<=>()","movetreenode#==()","movetreenode#add_child()","chessgame#available_moves()","chessgame#board_pieces_by_color()","bishop#build_bishop_move_tree()","chesspiece#build_directional_tree_nodes()","king#build_king_move_tree()","knight#build_knight_move_tree()","pawn#build_pawn_move_tree()","pawn#build_pawn_move_tree_first_move()","queen#build_queen_move_tree()","rook#build_rook_move_tree()","chesspiece#can_capture?()","pawn#can_capture?()","chessgame#can_castle?()","chessgame#change_turn()","chessgame#check_check()","chessgame#check_game_over()","movetree#clone()","chessgame#convert_algebraic_coordinates()","chessgame#convert_coordinates()","object#display_saves()","movetree#each()","pawn#en_passant()","pawn#first_move?()","chessgame#forecast_move()","chessgame#get_en_passant_moves()","chessgame#legal_moves()","object#load_game()","object#main()","chessgame#make_move()","chesspiece#move()","king#move()","pawn#move()","chesspiece#move_tree_in_bounds()","king#moved?()","bishop::new()","chessgame::new()","chesspiece::new()","king::new()","knight::new()","movetree::new()","movetreenode::new()","pawn::new()","queen::new()","rook::new()","pawn#new_piece_type()","chessgame#parse_move()","chessgame#pawn_legal_moves()","chessgame#place_back_row()","chessgame#place_pawns()","chessgame#place_pieces()","chessgame#play()","chessgame#player_input()","chessgame#player_input_type()","chesspiece#possible_moves()","pawn#possible_moves()","chessgame#print_help_menu()","chessgame#print_out_of_check_moves()","pawn#print_piece_types()","chessgame#random_move()","movetreenode#remove_child()","chessgame#save_game()","chessgame#setup_board()","object#setup_board()","movetree#to_a()","chessgame#to_s()","chesspiece#to_s()","movetreenode#to_s()","movetree#trim_branch!()","chessgame#validate_move()","","","","","","","","","",""],"info":[["Bishop","","Bishop.html","","<p>Bishop piece for a game of chess\n"],["ChessGame","","ChessGame.html","","<p>A chess game that contains the game board, rules, validation of moves, and computing check/checkmate. …\n"],["ChessPiece","","ChessPiece.html","","<p>An abstract class for a chess piece (pawn, king, rook, etc.)\n"],["InvalidMoveError","","InvalidMoveError.html","",""],["King","","King.html","","<p>King piece for a gameof chess\n"],["Knight","","Knight.html","","<p>Knight piece for a game of chess\n"],["MoveTree","","MoveTree.html","","<p>A tree structure for the possible moves of a chess piece.\n"],["MoveTreeNode","","MoveTreeNode.html","","<p>A node structure for the tree representation of a pieces potential moves. See MoveTree.\n"],["Object","","Object.html","",""],["Pawn","","Pawn.html","","<p>Pawn piece for a game of chess\n"],["Queen","","Queen.html","","<p>Queen piece for a game of chess\n"],["Rook","","Rook.html","","<p>Rook piece for a game of chess\n"],["<=>","ChessPiece","ChessPiece.html#method-i-3C-3D-3E","(other)","<p>Compare pieces based on their point values. Note: Since Bishop and Knight point values are equal, it …\n"],["==","MoveTreeNode","MoveTreeNode.html#method-i-3D-3D","(other)","<p>Define equality between two nodes by same location.\n<p>@param [MoveTreeNode] other The other MoveTreeNode …\n"],["add_child","MoveTreeNode","MoveTreeNode.html#method-i-add_child","(loc)","<p>Add a child to the array of children nodes.\n<p>@param [Array&lt;Integer&gt;] loc An integer array of length …\n"],["available_moves","ChessGame","ChessGame.html#method-i-available_moves","()","<p>Returns an hash of moves that will allow the current player to be out of check. If the list is empty, …\n"],["board_pieces_by_color","ChessGame","ChessGame.html#method-i-board_pieces_by_color","()","<p>Returns an array with 2 arrays, the first of which is all the white pieces and the second is all the …\n"],["build_bishop_move_tree","Bishop","Bishop.html#method-i-build_bishop_move_tree","()","<p>Builds a Bishop&#39;s move tree. The Bishop can move diagonally as far as the board permits.\n<p>@return [MoveTree] …\n"],["build_directional_tree_nodes","ChessPiece","ChessPiece.html#method-i-build_directional_tree_nodes","(direction = [1, 0])","<p>Add children to move tree nodes such that each move is a child node of the move that precedes it.\n<p>@param …\n"],["build_king_move_tree","King","King.html#method-i-build_king_move_tree","()","<p>Builds a king move tree where the king can move in any direction up to one space.\n<p>@return [MoveTree]  …\n"],["build_knight_move_tree","Knight","Knight.html#method-i-build_knight_move_tree","()","<p>Builds the Knight move tree. The Knight can move in an L shape in any direction as long as the board …\n"],["build_pawn_move_tree","Pawn","Pawn.html#method-i-build_pawn_move_tree","()","<p>Builds the Pawn move tree without the two-space forward move. The pawn can move forward 2 spaces on its …\n"],["build_pawn_move_tree_first_move","Pawn","Pawn.html#method-i-build_pawn_move_tree_first_move","()","<p>Builds the Pawn move tree. The pawn can move forward 2 spaces on its first move, but otherwise can only …\n"],["build_queen_move_tree","Queen","Queen.html#method-i-build_queen_move_tree","()","<p>Builds the Queen&#39;s move tree. The Queen can move in any direction as far as the board permits.\n<p>@return …\n"],["build_rook_move_tree","Rook","Rook.html#method-i-build_rook_move_tree","()","<p>Builds the Rook&#39;s move tree. The Rook can move horizontally and vertically as far as the board permits. …\n"],["can_capture?","ChessPiece","ChessPiece.html#method-i-can_capture-3F","(other_piece)","<p>Returns whether the piece can capture another piece given its position.\n<p>@param [ChessPiece] other_piece …\n"],["can_capture?","Pawn","Pawn.html#method-i-can_capture-3F","(other_piece)","<p>Returns whether the pawn can capture a piece at a given location based on its current position. This …\n"],["can_castle?","ChessGame","ChessGame.html#method-i-can_castle-3F","(from, to)","<p>Returns whether or not a king can make the castle move or not\n<p>@param [Array&lt;Integer&gt;] from  An integer …\n"],["change_turn","ChessGame","ChessGame.html#method-i-change_turn","()","<p>Changes whose turn it is by switching between &#39;black&#39; and &#39;white&#39;.\n<p>@return [String] @current_player_color …\n"],["check_check","ChessGame","ChessGame.html#method-i-check_check","()","<p>Checks whether a king is currently in check. If it is, it returns the piece that puts it in check and …\n"],["check_game_over","ChessGame","ChessGame.html#method-i-check_game_over","()","<p>Determines whether the game ends with a checkmate or stalemate.\n<p>@return [String] “Checkmate” …\n"],["clone","MoveTree","MoveTree.html#method-i-clone","()","<p>Creates a deep copy of the move tree.\n<p>@return [MoveTree] A deep copy of self.\n"],["convert_algebraic_coordinates","ChessGame","ChessGame.html#method-i-convert_algebraic_coordinates","(coord_arr)","<p>Converts coordinates into algebraic notation space names. Inverse method of <code>convert_coordinates</code>.\n<p>@param …\n"],["convert_coordinates","ChessGame","ChessGame.html#method-i-convert_coordinates","(coord_str)","<p>Converts algebraic notation space names to coordinates corresponding with @board.\n<p>@param [String] coord_str …\n"],["display_saves","Object","Object.html#method-i-display_saves","()","<p>Displays the saved games for the player to choose from.\n"],["each","MoveTree","MoveTree.html#method-i-each","(&block)","<p>Iterates through the tree using level order.\n<p>@param [Block or Proc] The block to call each node in the …\n"],["en_passant","Pawn","Pawn.html#method-i-en_passant","(other_piece)","<p>Returns whether the Pawn can capture another Pawn using the rule “En passant.” See the Wikipeida …\n"],["first_move?","Pawn","Pawn.html#method-i-first_move-3F","()","<p>Returns whether or not the move the Pawn is on or just finished its first ever move.\n<p>@return [true] if …\n"],["forecast_move","ChessGame","ChessGame.html#method-i-forecast_move","(from, to)","<p>Moves a piece at a given location to another location, checks if the the move leaves the current player&#39;s …\n"],["get_en_passant_moves","ChessGame","ChessGame.html#method-i-get_en_passant_moves","(pawn)","<p>Returns an array of the valid En Passant moves for a given pawn\n<p>@param [Pawn] pawn The pawn to find the …\n"],["legal_moves","ChessGame","ChessGame.html#method-i-legal_moves","(chess_piece)","<p>Returns an array of the legal moves that the piece can make. This will prevent pieces from going through …\n"],["load_game","Object","Object.html#method-i-load_game","()","<p>Displays the saved games and allows a player to choose a saved file.\n<p>@return [String] The string to the …\n"],["main","Object","Object.html#method-i-main","()",""],["make_move","ChessGame","ChessGame.html#method-i-make_move","(from, to)","<p>Moves a piece at a given location to another location if the move is valid. Raises an InvalidMoveError …\n"],["move","ChessPiece","ChessPiece.html#method-i-move","(to)","<p>Updates position to be the <code>to</code>. Returns the piece with the updated location.\n<p>@param [Array&lt;Integer&gt;] …\n"],["move","King","King.html#method-i-move","(to)","<p>Flags a king as having moved after the first move\n"],["move","Pawn","Pawn.html#method-i-move","(to, player_type = 'human')","<p>Moves the Pawn and updates @move_count If the pawn reaches the back row of the opposing side, it returns …\n"],["move_tree_in_bounds","ChessPiece","ChessPiece.html#method-i-move_tree_in_bounds","()","<p>Returns and assigns @move_tree with all moves in bounds\n<p>@return A move tree of moves that are within the …\n"],["moved?","King","King.html#method-i-moved-3F","()","<p>Returns whether or not the king has moved before for the purpose of whether or not the king can castle …\n"],["new","Bishop","Bishop.html#method-c-new","(color, position)","<p>Initializes a new bishop piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new","ChessGame","ChessGame.html#method-c-new","(white_player='human', black_player='human')","<p>Creates instance variables and sets up the board for the start of the game.\n"],["new","ChessPiece","ChessPiece.html#method-c-new","(name, color, position, points)","<p>Initializes a piece with its name, color, position, and score.\n<p>@param [String]         name      The name …\n"],["new","King","King.html#method-c-new","(color, position)","<p>Initializes a new king piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new","Knight","Knight.html#method-c-new","(color, position)","<p>Initializes a new knight piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new","MoveTree","MoveTree.html#method-c-new","(root_position)","<p>Assigns a MoveTreeNode to be the root.\n<p>@param [Array&lt;Integer&gt;] root_position An integer array of …\n"],["new","MoveTreeNode","MoveTreeNode.html#method-c-new","(loc)","<p>Initialize a node with its location and an empty children array.\n<p>@param [Array&lt;Integer&gt;] loc An …\n"],["new","Pawn","Pawn.html#method-c-new","(color, position)","<p>Initializes a new pawn piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new","Queen","Queen.html#method-c-new","(color, position)","<p>Initializes a new queen piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new","Rook","Rook.html#method-c-new","(color, position)","<p>Initializes a new rook piece with color and position.\n<p>@param [String]         color     A string denoting …\n"],["new_piece_type","Pawn","Pawn.html#method-i-new_piece_type","(player_type = 'human')","<p>Prompt the user for input to determine what piece to return when the pawn advances to the last square …\n"],["parse_move","ChessGame","ChessGame.html#method-i-parse_move","(input)","<p>Parses a move input string to determine the type of input given. The different suppored moves are:\n<p>A string …\n\n"],["pawn_legal_moves","ChessGame","ChessGame.html#method-i-pawn_legal_moves","(pawn)","<p>Returns an array of legal moves that a pawn can make. Since a pawn can only move diagonally if it can …\n"],["place_back_row","ChessGame","ChessGame.html#method-i-place_back_row","(color)","<p>Returns an array of back row pieces of the appropriate color on the appropriate row based on <code>color</code>.\n<p>@param …\n"],["place_pawns","ChessGame","ChessGame.html#method-i-place_pawns","(color)","<p>Returns an array of pawns of the appropriate color on the appropriate row based on <code>color</code>.\n<p>@param [String] …\n"],["place_pieces","ChessGame","ChessGame.html#method-i-place_pieces","(color)","<p>Returns the 2 arrays of the chess pieces in the proper places based od their color.\n<p>@param [String] color …\n"],["play","ChessGame","ChessGame.html#method-i-play","()","<p>Runs the main game loop for a chess game, which is comprised of several stages:\n<p>Parse player input\n<p>Attempt …\n"],["player_input","ChessGame","ChessGame.html#method-i-player_input","()","<p>Accepts player input and either returns the components needed to input a move or saves the game.\n<p>@return …\n"],["player_input_type","ChessGame","ChessGame.html#method-i-player_input_type","(input)","<p>Returns the type of player input, whether they input a game-ending command or a move command.\n<p>@param [String] …\n"],["possible_moves","ChessPiece","ChessPiece.html#method-i-possible_moves","()","<p>Returns a move tree of legal move positions.\n<p>This method takes the @move_tree_template and @position attributes …\n"],["possible_moves","Pawn","Pawn.html#method-i-possible_moves","()","<p>Possible moves rewrite for the pawn\n"],["print_help_menu","ChessGame","ChessGame.html#method-i-print_help_menu","()","<p>Prints the help menu complete with tutorial and move explanations\n<p>@return [String] &#39;help_menu&#39; …\n"],["print_out_of_check_moves","ChessGame","ChessGame.html#method-i-print_out_of_check_moves","()","<p>Prints the moves that the current player can make to get out of check.\n"],["print_piece_types","Pawn","Pawn.html#method-i-print_piece_types","()","<p>Prints the menu for pieces the pawn can become.\n"],["random_move","ChessGame","ChessGame.html#method-i-random_move","()","<p>Chooses a random move from the list of available moves.\n<p>@return [Array&lt;Array&lt;Integer&gt;&gt;] [from, …\n"],["remove_child","MoveTreeNode","MoveTreeNode.html#method-i-remove_child","(loc)","<p>Removes a child from the array of children nodes.\n<p>@param [Array&lt;Integer&gt;] loc An integer array of …\n"],["save_game","ChessGame","ChessGame.html#method-i-save_game","()","<p>Saves the game by dumping the object into a YAML file.\n"],["setup_board","ChessGame","ChessGame.html#method-i-setup_board","()","<p>Returns an array that sets the board up for the start of the game.\n<p>@return [Array&lt;Array&gt;] The chess …\n"],["setup_board","Object","Object.html#method-i-setup_board","(loc_to_piece_hash = {})","<p>Creates a board placing pieces using a location =&gt; piece hash.\n"],["to_a","MoveTree","MoveTree.html#method-i-to_a","()","<p>Returns an array of the Move Tree using level order (for ease of writing test cases)\n<p>@return [Array&lt;Array&lt;Integer&gt;&gt;] …\n"],["to_s","ChessGame","ChessGame.html#method-i-to_s","()","<p>Returns a string of a board with pieces and appropriately shaded spaces.\n<p>@return [String] The chess board. …\n"],["to_s","ChessPiece","ChessPiece.html#method-i-to_s","()","<p>Returns the name of the piece with a space after it.\n<p>@return [String] The name of the piece of its color …\n"],["to_s","MoveTreeNode","MoveTreeNode.html#method-i-to_s","()","<p>Returns a string representation of the node using its location and a list of its children.\n<p>@returns [String] …\n"],["trim_branch!","MoveTree","MoveTree.html#method-i-trim_branch-21","(loc)","<p>Removes a node and its children from the MoveTree. Returns the trimmed child if it was found and nil …\n"],["validate_move","ChessGame","ChessGame.html#method-i-validate_move","(from, to)","<p>Determines whether or not the move is a valid move. If the move is valid, it returns that space on the …\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source &#39;rubygems.org&#39;\n<p>git_source(:github) { |repo_name| “github.com/#{repo_name …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  diff-lcs (1.4.4)\n  rake (13.0.1)\n  rspec (3.9.0)\n    rspec-core ...</pre>\n"],["README","","README_md.html","","<p>RubyChess\n<p>A Ruby implementation of Chess to be played in the terminal.\n<p>Table of Contents\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>require &#39;rspec/core/rake_task&#39;\n<p>task default: [:spec]\n"],["RubyChess-workspace.code-workspace","","RubyChess-workspace_code-workspace.html","","<p>{\n\n<pre>&quot;folders&quot;: [\n        {\n                &quot;path&quot;: &quot;.&quot;\n        }\n],\n&quot;settings&quot;: {}</pre>\n<p>}\n"],["application.css","","coverage/assets/0_12_3/application_css.html","","<p>html,body,div,span,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,code,del,dfn,em,img,q,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,dialog,figure,footer,header,hgroup,nav,section{margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline}article,aside,dialog,figure,footer,header,hgroup,nav,section{display:block}body{line-height:1.5}table{border-collapse:separate;border-spacing:0}caption,th,td{text-align:left;font-weight:normal}table,td,th{vertical-align:middle}blockquote:before,blockquote:after,q:before,q:after{content:“”}blockquote,q{quotes:“” …\n"],["application.js","","coverage/assets/0_12_3/application_js.html","","<p>!function(e,t)“use strict”;“object”==typeof module&&“object”==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw …\n"],["index.html","","coverage/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html xmlns=&#39;www.w3.org/1999/xhtml&#39;&gt;\n\n<pre>&lt;head&gt;\n  &lt;title&gt;Code coverage ...</pre>\n"],["index.html","","index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html lang=“en”&gt; &lt;head&gt;\n\n<pre>&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;meta http-equiv=&quot;X-UA-Compatible&quot; ...</pre>\n"],["main.css","","styles/main_css.html","","<p>html {\n\n<pre>background-color: #222;\ncolor: white;\nfont-family: Arial, Helvetica, sans-serif;\nfont-size: 1rem;</pre>\n"]]}}